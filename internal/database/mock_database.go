// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateRss mocks base method.
func (m *MockDatabase) CreateRss(arg0 *Rss) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRss", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRss indicates an expected call of CreateRss.
func (mr *MockDatabaseMockRecorder) CreateRss(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRss", reflect.TypeOf((*MockDatabase)(nil).CreateRss), arg0)
}

// GetCachedRss mocks base method.
func (m *MockDatabase) GetCachedRss(email, name string) (*RssCached, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedRss", email, name)
	ret0, _ := ret[0].(*RssCached)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedRss indicates an expected call of GetCachedRss.
func (mr *MockDatabaseMockRecorder) GetCachedRss(email, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedRss", reflect.TypeOf((*MockDatabase)(nil).GetCachedRss), email, name)
}

// GetItemsToCache mocks base method.
func (m *MockDatabase) GetItemsToCache(batchSize int) ([]*Rss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsToCache", batchSize)
	ret0, _ := ret[0].([]*Rss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsToCache indicates an expected call of GetItemsToCache.
func (mr *MockDatabaseMockRecorder) GetItemsToCache(batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsToCache", reflect.TypeOf((*MockDatabase)(nil).GetItemsToCache), batchSize)
}

// GetRssForIndex mocks base method.
func (m *MockDatabase) GetRssForIndex() ([]*Rss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRssForIndex")
	ret0, _ := ret[0].([]*Rss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRssForIndex indicates an expected call of GetRssForIndex.
func (mr *MockDatabaseMockRecorder) GetRssForIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRssForIndex", reflect.TypeOf((*MockDatabase)(nil).GetRssForIndex))
}

// SaveCachedRss mocks base method.
func (m *MockDatabase) SaveCachedRss(id int64, rssFeed string, validUntil time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCachedRss", id, rssFeed, validUntil)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCachedRss indicates an expected call of SaveCachedRss.
func (mr *MockDatabaseMockRecorder) SaveCachedRss(id, rssFeed, validUntil interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCachedRss", reflect.TypeOf((*MockDatabase)(nil).SaveCachedRss), id, rssFeed, validUntil)
}

// Shutdown mocks base method.
func (m *MockDatabase) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockDatabaseMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDatabase)(nil).Shutdown))
}
